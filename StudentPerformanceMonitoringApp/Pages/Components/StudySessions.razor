@page "/studysessions"
@using StudentPerformanceTracker.Models
@using StudentPerformanceTracker.Services
@inject StudySessionServiceHttpClient StudySessionServiceHttpClient
@inject NavigationManager Navigation

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Manage Study Sessions</h3>
        <button class="btn btn-primary" @onclick="ShowAddStudySession">Add New Study Session</button>
    </div>

    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Date</th>
                <th>Subject</th>
                <th>Duration</th>
                <th>Knowledge Level</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (studySessions == null)
            {
                <tr>
                    <td colspan="5">Loading...</td>
                </tr>
            }
            else
            {
                @foreach (var session in studySessions)
                {
                    <tr>
                        <td>@session.Date.ToShortDateString()</td>
                        <td>@session.Subject</td>
                        <td>@session.Duration hours</td>
                        <td>@session.KnowledgeLevel</td>
                        <td>
                            <div class="ml-10 gap-2">
                                <button class="btn btn-sm btn-warning" style="min-width: 70px;" @onclick="() => EditStudySession(session.Id)">Edit</button>
                                <button class="btn btn-sm btn-danger" style="min-width: 70px;" @onclick="() => DeleteStudySession(session.Id)">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<StudySession> studySessions;

    protected override async Task OnInitializedAsync()
    {
        studySessions = await StudySessionServiceHttpClient.GetAllAsync();
    }

    private void ShowAddStudySession()
    {
        Navigation.NavigateTo("/addeditstudysession");
    }

    private void EditStudySession(string id)
    {
        Navigation.NavigateTo($"/addeditstudysession/{id}");
    }

    private async Task DeleteStudySession(string id)
    {
        await StudySessionServiceHttpClient.DeleteAsync(id);
        studySessions = await StudySessionServiceHttpClient.GetAllAsync(); 
    }
}
